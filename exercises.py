# üü¢ Iniciante
# Esses exerc√≠cios ajudam a praticar sintaxe b√°sica, estruturas de controle e tipos de dados simples.

# Par ou √çmpar: Receba um n√∫mero e diga se ele √© par ou √≠mpar.
def par_ou_impar(numero):
    if (numero % 2) == 0:
        print(f'O n√∫mero {numero} √© par!')
    else:
        print(f'O n√∫mero {numero} √© impar!')

par_ou_impar(6)

# Maior de Tr√™s: Receba tr√™s n√∫meros e retorne o maior.
def maior(num1, num2, num3):
    if num1 > num2 & num3:
        resultado = num1
    elif num1 > num3:
        resultado = num2
    elif num2 > num1:
        resultado = num2
    elif num2 > num3:
        resultado = num2
    elif num3 > num1:
        resultado = num3
    elif num3 > num2:
        resultado = num3
    
    print(f'O maior n√∫mero √© {resultado}')

maior(3, 5, 10)

# Calculadora Simples: Implemente uma calculadora que realiza as quatro opera√ß√µes b√°sicas.
def calculadora(num1, num2, operacao):
    match operacao:
        case 'soma':
            resultado = num1 + num2
        case 'subtra√ß√£o':
            resultado = num1 - num2
        case 'divis√£o':
            resultado = num1 / num2
        case 'multiplica√ß√£o':
            resultado = num1 * num2

    print(f'O resultado da opera√ß√£o de {operacao} √©: {resultado}')

calculadora(2, 3, 'soma')

# Contador de Vogais: Conte quantas vogais h√° em uma string.


# Fatorial: Calcule o fatorial de um n√∫mero usando for ou while.
def fatorial(num):
    resultado = 1
    if num == 1:
        return resultado
    else:
        resultado = resultado * num
        num =- 1
        fatorial(num)

fatorial(3)

# üü° Intermedi√°rio
# Aqui voc√™ come√ßa a usar listas, fun√ß√µes e manipula√ß√£o de strings mais avan√ßada.

# Ordena√ß√£o Manual: Ordene uma lista de n√∫meros sem usar sort().
# Pal√≠ndromo: Verifique se uma palavra ou frase √© um pal√≠ndromo.
# Busca Linear: Implemente uma fun√ß√£o que busca um valor em uma lista.
def busca(valor, lista):
    for valores in lista:
        if valor == valores:
            print(f'O valor {valor} est√° presente na lista!')
            return valores
        else:
            print(f'O valor {valor} n√£o est√° presenta na lista.') 

# Conversor de Base: Converta um n√∫mero decimal para bin√°rio.
# Contador de Palavras: Conte quantas vezes cada palavra aparece em um texto.
 

# üî¥ Avan√ßado
# Esses envolvem algoritmos cl√°ssicos e estruturas como dicion√°rios, conjuntos e recurs√£o.

# Sequ√™ncia de Fibonacci: Gere os primeiros N n√∫meros da sequ√™ncia.
# Anagramas: Verifique se duas palavras s√£o anagramas.
# Jogo da Forca (texto): Implemente uma vers√£o simples do jogo da forca.
# Validador de CPF: Crie um algoritmo que valide um CPF.
# Sudoku Checker: Verifique se uma matriz 9x9 representa uma solu√ß√£o v√°lida de Sudoku.
